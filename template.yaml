AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-base #magic___^_^___line Sample SAM Template for sam-base #magic___^_^___line
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  stage:
    Type: String
    Default: DEV
    Description: "Stage name for the API Gateway"
  tableName:
    Type: String
    Default: Table_1
    Description: "Name of the DynamoDB table"

Resources:
  baseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sam-base-baseFunction-${stage}"
      CodeUri: src/controllers
      Environment:
        Variables:
          stage: !Ref stage
          tableName: !Ref tableName
      Handler: getAllController.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 15
      Architectures:
      - x86_64
      Events:
        Api:
          Type: Api
          Properties:
            Path: /base
            Method: get
            RestApiId: !Ref ApiGateway
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - getAllController.ts

  createItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "sam-base-createItem-${stage}"
      CodeUri: src/controllers
      Environment:
        Variables:
          stage: !Ref stage
          tableName: !Ref tableName
      Handler: ProductController.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 10
      Architectures:
      - x86_64
      Events:
        Api:
          Type: Api
          Properties:
            Path: /item
            Method: post
            RestApiId: !Ref ApiGateway
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - ProductController.ts

  DynamoDBTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Ref tableName
      AttributeDefinitions:
      - AttributeName: "PK"
        AttributeType: "S"
      - AttributeName: "SK"
        AttributeType: "S"
      - AttributeName: "GSI1PK"
        AttributeType: "S"
      - AttributeName: "GSI1SK"
        AttributeType: "S"
      - AttributeName: "GSI2PK"
        AttributeType: "S"
      - AttributeName: "GSI2SK"
        AttributeType: "N"
      - AttributeName: "GSI3PK"
        AttributeType: "S"
      - AttributeName: "GSI3SK"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "PK"
        KeyType: "HASH"
      - AttributeName: "SK"
        KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      Replicas:
      - Region: !Ref "AWS::Region" # Región principal (ej. us-east-1)
      - Region: sa-east-1 # Región de réplica
      GlobalSecondaryIndexes:
      - IndexName: 'GSI1'
        KeySchema:
        - AttributeName: "GSI1PK"
          KeyType: "HASH"
        - AttributeName: "GSI1SK"
          KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
      - IndexName: 'GSI2'
        KeySchema:
        - AttributeName: "GSI2PK"
          KeyType: "HASH"
        - AttributeName: "GSI2SK"
          KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
      - IndexName: 'GSI3'
        KeySchema:
        - AttributeName: "GSI3PK"
          KeyType: "HASH"
        - AttributeName: "GSI3SK"
          KeyType: "RANGE"
        Projection:
          ProjectionType: ALL

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref stage
      Name: !Sub "sam-base-${stage}"
      TracingEnabled: true
      Auth:
        ApiKeyRequired: false # Ajuste para deshabilitar la necesidad de API Key

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref ApiGateway
        Stage: !Ref stage
      Throttle:
        BurstLimit: 200 # Límite de solicitudes instantáneas
        RateLimit: 100 # Límite de solicitudes por segundo
      Quota:
        Limit: 10000 # Límite de solicitudes por mes
        Period: MONTH

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup

Outputs:
  BaseFunctionEndpoint:
    Description: API Gateway endpoint URL for the baseFunction function (GET /base)
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${stage}/base"
    Export:
      Name: !Sub "BaseFunctionEndpoint-${stage}"

  CreateItemFunctionEndpoint:
    Description: API Gateway endpoint URL for the createItemFunction function (POST /item)
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${stage}/item"
    Export:
      Name: !Sub "CreateItemFunctionEndpoint-${stage}"

  baseFunctionArn:
    Description: baseFunction Lambda Function ARN
    Value: !GetAtt baseFunction.Arn
    Export:
      Name: !Sub "BaseFunctionArn-${stage}"

  createItemFunctionArn:
    Description: createItemFunction Lambda Function ARN
    Value: !GetAtt createItemFunction.Arn
    Export:
      Name: !Sub "CreateItemFunctionArn-${stage}"

  baseFunctionIamRole:
    Description: Implicit IAM Role created for baseFunction function
    Value: !GetAtt baseFunctionRole.Arn
    Export:
      Name: !Sub "BaseFunctionIamRole-${stage}"
